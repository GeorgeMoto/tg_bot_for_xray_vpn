import requests
import datetime
import json
import uuid
import datetime
from urllib3.exceptions import InsecureRequestWarning
import urllib3

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(InsecureRequestWarning)


class XUI_Tester:
    def __init__(self, host, username, password):
        self.host = host.rstrip('/')
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.session.verify = False  # –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É

    def test_login(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –ª–æ–≥–∏–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ–º —Å /mypanel/login –∏–∑ URL)
        login_paths = ['/mypanel/login', '/login', '/panel/login', '/xui/login']

        login_data = {
            'username': self.username,
            'password': self.password
        }

        for path in login_paths:
            url = f"{self.host}{path}"
            print(f"   –ü—Ä–æ–±—É—é: {url}")

            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö CSRF —Ç–æ–∫–µ–Ω–æ–≤
                get_response = self.session.get(url, timeout=10)
                print(f"   GET —Å—Ç–∞—Ç—É—Å: {get_response.status_code}")

                # –ò—â–µ–º CSRF —Ç–æ–∫–µ–Ω –≤ HTML
                csrf_token = None
                if 'csrf' in get_response.text.lower() or '_token' in get_response.text.lower():
                    import re
                    csrf_match = re.search(r'name=["\']_token["\'] value=["\']([^"\']+)["\']', get_response.text)
                    if csrf_match:
                        csrf_token = csrf_match.group(1)
                        print(f"   –ù–∞–π–¥–µ–Ω CSRF —Ç–æ–∫–µ–Ω: {csrf_token[:20]}...")
                        login_data['_token'] = csrf_token

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                response = self.session.post(url, data=login_data, timeout=10, allow_redirects=False)
                print(f"   POST —Å—Ç–∞—Ç—É—Å: {response.status_code}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                cookies_count = len(self.session.cookies)
                print(f"   Cookies –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {cookies_count}")

                if cookies_count > 0:
                    print(f"   Cookie names: {list(self.session.cookies.keys())}")

                if response.status_code in [200, 302]:
                    if response.status_code == 302:
                        redirect_location = response.headers.get('Location', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        print(f"   –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: {redirect_location}")

                        # –ï—Å–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ø–∞–Ω–µ–ª—å - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ
                        if 'panel' in redirect_location.lower():
                            print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑: {path}")
                            return True, path

                    # –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ 200 –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    content = response.text.lower()
                    if 'error' in content or ('login' in content and 'panel' not in content):
                        print("   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—à–∏–±–∫–∞")
                        continue

                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑: {path}")
                    return True, path

            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞: {e}")

        print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—É—Ç—å")
        return False, None

    def test_page_access(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–∞–Ω–µ–ª–∏...")

        # –°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        pages = [
            '/panel',
            '/mypanel/panel',
            '/panel/inbounds',
            '/mypanel/panel/inbounds',
            '/inbounds'
        ]

        for page in pages:
            url = f"{self.host}{page}"
            print(f"   –ü—Ä–æ–≤–µ—Ä—è—é: {page}")

            try:
                response = self.session.get(url, timeout=10)
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")

                if response.status_code == 200:
                    content = response.text.lower()

                    if 'inbound' in content:
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å inbounds!")
                        print(f"   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {response.text[:200]}")
                        return True, page, response.text
                    elif 'login' in content:
                        print(f"   ‚ö†Ô∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ª–æ–≥–∏–Ω")
                    else:
                        print(f"   üìÑ –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")

            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞: {e}")

        return False, None, None

    def test_api_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é API endpoints...")

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API –ø—É—Ç–∏
        api_paths = [
            '/panel/api/inbounds/list',
            '/mypanel/panel/api/inbounds/list',
            '/api/inbounds/list',
            '/xui/api/inbounds/list'
        ]

        for path in api_paths:
            url = f"{self.host}{path}"
            print(f"   –ü—Ä–æ–±—É—é API: {url}")

            try:
                response = self.session.get(url, timeout=10)
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")

                if response.status_code == 200:
                    try:
                        data = response.json()
                        print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑: {path}")
                        print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys()) if isinstance(data, dict) else '–Ω–µ —Å–ª–æ–≤–∞—Ä—å'}")
                        return True, path, data
                    except:
                        print("   –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
                        content_preview = response.text[:200].replace('\n', ' ').replace('\r', ' ')
                        print(f"   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {content_preview}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —ç—Ç–æ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏?
                        if 'login' in response.text.lower() or 'username' in response.text.lower():
                            print("   ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ - —Å–µ—Å—Å–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å")
                        elif 'panel' in response.text.lower() and 'inbound' in response.text.lower():
                            print("   ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–Ω–µ–ª–∏ –≤–º–µ—Å—Ç–æ JSON API")

            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞: {e}")

        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—É—Ç—å")
        return False, None, None

    def get_inbounds_info(self, api_data):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö inbounds"""
        print("\nüìã –ê–Ω–∞–ª–∏–∑ Inbounds:")

        if not api_data.get('success'):
            print("‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:", api_data.get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
            return None

        inbounds = api_data.get('obj', [])
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ inbounds: {len(inbounds)}")

        for i, inbound in enumerate(inbounds):
            print(f"\nüîπ Inbound #{i + 1}:")
            print(f"   ID: {inbound.get('id')}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {inbound.get('remark', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   –ü—Ä–æ—Ç–æ–∫–æ–ª: {inbound.get('protocol')}")
            print(f"   –ü–æ—Ä—Ç: {inbound.get('port')}")
            print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if inbound.get('enable') else '–ù–µ—Ç'}")

            # –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤
            try:
                settings = json.loads(inbound.get('settings', '{}'))
                clients = settings.get('clients', [])
                print(f"   –ö–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")

                if clients:
                    print("   üìã –ö–ª–∏–µ–Ω—Ç—ã:")
                    for j, client in enumerate(clients[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 3
                        status = "üü¢" if client.get('enable') else "üî¥"
                        print(
                            f"      {status} {client.get('email', '–ë–µ–∑ email')} (ID: {client.get('id', 'N/A')[:8]}...)")

                    if len(clients) > 3:
                        print(f"      ... –∏ –µ—â–µ {len(clients) - 3} –∫–ª–∏–µ–Ω—Ç–æ–≤")

            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")

        return inbounds

    def create_test_client(self, inbound_id, email="test@example.com", days=30):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        print(f"\nüîß –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {email}")

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        current_time = int(datetime.datetime.now().timestamp() * 1000)
        expiry_time = current_time + (86400000 * days) - 10800000  # MSK timezone

        client_id = str(uuid.uuid4())

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
        client_data = {
            "id": inbound_id,
            "settings": json.dumps({
                "clients": [{
                    "id": client_id,
                    "alterId": 90,
                    "email": email,
                    "limitIp": 3,
                    "totalGB": 0,  # –ë–µ–∑–ª–∏–º–∏—Ç
                    "expiryTime": expiry_time,
                    "enable": True,
                    "tgId": "",
                    "subId": ""
                }]
            })
        }

        headers = {"Accept": "application/json"}

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_paths = [
            '/panel/api/inbounds/addClient',
            '/mypanel/panel/api/inbounds/addClient',
            '/api/inbounds/addClient'
        ]

        for path in add_paths:
            url = f"{self.host}{path}"
            print(f"   –ü—Ä–æ–±—É—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {url}")

            try:
                response = self.session.post(url, headers=headers, json=client_data, timeout=10)
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")

                if response.status_code == 200:
                    try:
                        result = response.json()
                        if result.get('success'):
                            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                            print(f"   Email: {email}")
                            print(f"   Client ID: {client_id}")
                            print(f"   –°—Ä–æ–∫: {days} –¥–Ω–µ–π")
                            return True, client_id, email
                        else:
                            print(f"‚ùå API –æ—à–∏–±–∫–∞: {result.get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    except:
                        print("   –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")

            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞: {e}")

        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
        return False, None, None

    def generate_config_url(self, inbound_data, client_id, email):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
        print(f"\nüîó –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è {email}")

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ inbound
            protocol = inbound_data.get('protocol')
            port = inbound_data.get('port')

            # –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ host
            import re
            ip_match = re.search(r'(\d+\.\d+\.\d+\.\d+)', self.host)
            server_ip = ip_match.group(1) if ip_match else 'your-server-ip'

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–∞
            stream_settings = json.loads(inbound_data.get('streamSettings', '{}'))
            network = stream_settings.get('network', 'tcp')
            security = stream_settings.get('security', 'none')

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            if protocol == 'vless':
                config_url = f"vless://{client_id}@{server_ip}:{port}/?type={network}&security={security}#{email}"

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Reality
                if security == 'reality':
                    reality_settings = stream_settings.get('realitySettings', {})
                    if reality_settings:
                        dest = reality_settings.get('dest', '')
                        server_names = reality_settings.get('serverNames', [])
                        if server_names:
                            config_url += f"&sni={server_names[0]}"

            elif protocol == 'vmess':
                # –î–ª—è VMess –Ω—É–∂–µ–Ω JSON —Ñ–æ—Ä–º–∞—Ç, –ø–æ—Ç–æ–º base64
                vmess_config = {
                    "v": "2",
                    "ps": email,
                    "add": server_ip,
                    "port": str(port),
                    "id": client_id,
                    "aid": "90",
                    "net": network,
                    "type": "none",
                    "host": "",
                    "path": "",
                    "tls": security
                }

                import base64
                json_str = json.dumps(vmess_config)
                encoded = base64.b64encode(json_str.encode()).decode()
                config_url = f"vmess://{encoded}"

            else:
                config_url = f"{protocol}://{client_id}@{server_ip}:{port}#{email}"

            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:")
            print(f"   –ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol}")
            print(f"   –°–µ—Ä–≤–µ—Ä: {server_ip}:{port}")
            print(f"   –°–µ—Ç—å: {network}")
            print(f"   –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security}")
            print(f"   URL: {config_url}")

            return config_url

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None

    def full_test(self):
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ 3X-UI API")
        print("=" * 50)

        # 1. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        login_success, login_path = self.test_login()
        if not login_success:
            print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        page_success, page_path, page_content = self.test_page_access()

        # 3. –¢–µ—Å—Ç API
        api_success, api_path, api_data = self.test_api_endpoints()
        if not api_success:
            print("\n‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏–π")
            print("   –ü–∞–Ω–µ–ª—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")

            if page_success:
                print(f"‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: {page_path}")
                print("   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
            else:
                print("‚ùå –ù–∏ API, –Ω–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return

        # 4. –ê–Ω–∞–ª–∏–∑ inbounds
        if api_success:
            inbounds = self.get_inbounds_info(api_data)
            if not inbounds:
                print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö inbounds")
                return

            # 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            first_inbound = inbounds[0]
            inbound_id = first_inbound.get('id')

            client_success, client_id, email = self.create_test_client(inbound_id)
            if not client_success:
                print("\n‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                print("   (–≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")

            # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if client_success:
                config_url = self.generate_config_url(first_inbound, client_id, email)
        else:
            inbounds = None
            client_success = False

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç ({login_path})")

        if page_success:
            print(f"‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –¥–æ—Å—Ç—É–ø–µ–Ω ({page_path})")
        else:
            print("‚ùå –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        if api_success:
            print(f"‚úÖ API: —Ä–∞–±–æ—Ç–∞–µ—Ç ({api_path})")
            print(f"‚úÖ Inbounds: –Ω–∞–π–¥–µ–Ω–æ {len(inbounds) if inbounds else 0}")
        else:
            print("‚ùå API: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        if client_success:
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("\nüéâ –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢! –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API.")
        elif api_success:
            print("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤: —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏")
            print("\nüìù API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –æ—Ç–ª–∞–¥–∏—Ç—å")
        elif page_success:
            print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥")
            print("   API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤–µ–±-—Ñ–æ—Ä–º—ã")
        else:
            print("\n‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
            print("   –ù–∏ API, –Ω–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")


# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    HOST = "https://45.153.187.138:44441"
    USERNAME = "deffer"
    PASSWORD = "Fkktuj387hbz1216"

    print("3X-UI API Tester")
    print("=" * 30)
    print(f"–°–µ—Ä–≤–µ—Ä: {HOST}")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {USERNAME}")
    print()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    tester = XUI_Tester(HOST, USERNAME, PASSWORD)
    tester.full_test()