from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, BufferedInputFile, Document

from datetime import datetime as dt

from config import admins
from keyboard.inline_keyboards import *
from Data import *
from database import *
from ui_api import *

# Create a Router instance
router = Router()


# Send greeting message to admin when bot started
async def on_startup(bot: Bot):
    await bot.send_message(chat_id=admins["George"], text="<b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await init_database()
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await migrate_database()


@router.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    id_list = await get_all_user_ids()

    if not message.from_user.is_bot and user_id not in id_list:
        await add_user_to_db(user_id, username, first_name, last_name)
        await create_backup_db()

    keyboard = get_start_key_board()
    await message.answer(text=greetings, reply_markup=keyboard)

@router.message(Command("users"))
async def admin_users_stats(message: Message):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if message.from_user.id in admins.values():
        active_users = await get_active_users_count()
        total_users = await get_total_users_count()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_users = await get_users_for_notification()
        expired_users = await get_expired_users()

        stats_text = f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n" \
                     f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n" \
                     f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_users}\n" \
                     f"üîî –ù—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å: {len(notification_users)}\n" \
                     f"‚è∞ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(expired_users)}\n\n" \
                     f"ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:</b>\n" \
                     f"‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤\n" \
                     f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00\n" \
                     f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ"

        await message.answer(stats_text)


@router.message(Command("notify"))
async def send_payment_notifications(message: Message):
    """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if message.from_user.id in admins.values():
        notification_users = await get_users_for_notification()

        if not notification_users:
            await message.answer("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
                                 "‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00")
            return

        await message.answer(f"üîî –ù–∞—á–∏–Ω–∞—é —Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {len(notification_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        sent_count = 0
        for user in notification_users:
            try:
                formatted_finish_date = format_date_for_display(user['finish_date'])
                await message.bot.send_message(
                    user['id'],
                    f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ</b>\n\n"
                    f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è <b>{formatted_finish_date}</b>.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É."
                )
                sent_count += 1
                await asyncio.sleep(0.3)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}: {e}")

        await message.answer(f"‚úÖ –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
                             "‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00")


@router.message(Command("cleanup"))
async def cleanup_expired_users(message: Message):
    """–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    if message.from_user.id in admins.values():
        expired_users = await get_expired_users()

        if not expired_users:
            await message.answer("üßπ –ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏\n\n"
                                 "‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤")
            return

        await message.answer(f"üßπ –ù–∞—á–∏–Ω–∞—é —Ä—É—á–Ω—É—é –æ—á–∏—Å—Ç–∫—É –¥–ª—è {len(expired_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        deactivated_count = 0
        for user in expired_users:
            try:
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ –ë–î
                await deactivate_user(user['id'])

                # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–Ω–µ–ª–∏ XUI
                if user['email_identifier']:
                    await delete_client_by_email(user['email_identifier'])

                deactivated_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['id']}: {e}")

        await message.answer(f"üßπ –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {deactivated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ\n\n"
                             "‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤")


@router.message(Command("status"))
async def bot_status(message: Message):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    if message.from_user.id in admins.values():
        current_time = dt.now().strftime('%d.%m.%Y %H:%M')

        active_users = await get_active_users_count()
        expired_users = await get_expired_users()
        notification_users = await get_users_for_notification()

        status_text = f"ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n" \
                      f"üïê –í—Ä–µ–º—è: {current_time}\n" \
                      f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_users}\n" \
                      f"‚è∞ –ò—Å—Ç–µ–∫—à–∏—Ö: {len(expired_users)}\n" \
                      f"üîî –ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é: {len(notification_users)}\n\n" \
                      f"üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:</b>\n" \
                      f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n" \
                      f"‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤\n" \
                      f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00\n\n" \
                      f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n" \
                      f"/users - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" \
                      f"/notify - —Ä—É—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" \
                      f"/cleanup - —Ä—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞\n" \
                      f"/status - —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å"

        await message.answer(status_text)


@router.callback_query(F.data == "key_information")
async def get_information(call: CallbackQuery):
    await call.message.edit_text(information_text, reply_markup=get_back_to_main_menu())
    await call.answer(cache_time=20)


@router.callback_query(F.data == "key_download")
async def get_info_download(call: CallbackQuery):
    await call.message.edit_text(download_text, reply_markup=get_back_to_main_menu())
    await call.answer(cache_time=20)


@router.callback_query(F.data == "key_important_info")
async def get_important_info(call: CallbackQuery):
    await call.message.edit_text(important_info_text, reply_markup=get_back_to_main_menu())
    await call.answer(cache_time=20)


@router.callback_query(F.data == "key_payments")
async def get_payments_info(call: CallbackQuery):
    await call.message.edit_text(payments_text, reply_markup=get_keyboard_to_make_payment())
    await call.answer(cache_time=5)


@router.callback_query(F.data == "key_subscription")
async def get_subscription_info(call: CallbackQuery):
    user_status = await get_user_status(call.from_user.id)

    if user_status:
        finish_date = await get_user_finish_date(call.from_user.id)
        notice_date = await get_payment_notice_date(call.from_user.id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_finish_date = format_date_for_display(finish_date)
        formatted_notice_date = format_date_for_display(notice_date)

        await call.message.edit_text(
            payment_notice_text.format(formatted_finish_date, formatted_notice_date),
            reply_markup=get_back_to_main_menu()
        )
        await call.answer(cache_time=10)
    else:
        await call.message.edit_text("–í—ã –µ—â–µ –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=get_back_to_main_menu())
        await call.answer(cache_time=10)


@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(call: CallbackQuery):
    await call.message.edit_text(text=greetings, reply_markup=get_start_key_board())
    await call.answer()


@router.message(Command("help"))
async def get_help(message: Message):
    await message.answer(text=help_text)


@router.message(Command("backup"))
async def backup(message: Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î"""
    if message.from_user.id in admins.values():
        keyboard = get_keyboard_yes_or_no("–î–ê", "–ù–ï–¢", "key_copy", "key_cancel_copy")
        await create_backup_db()
        await message.answer("Backup –ó–∞–ø—É—â–µ–Ω. –í—ã—Å–ª–∞—Ç—å –∫–æ–ø–∏—é –±–¥?", reply_markup=keyboard)


@router.callback_query(F.data.in_({"key_copy", "key_cancel_copy"}))
async def make_backup(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è backup"""
    if call.data == "key_copy":
        await call.message.edit_text("–û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–ø–∏—é –±–¥")
        try:
            with open(PATH_TO_BACKUP_DB, "rb") as file:
                db_content = file.read()

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BufferedInputFile –¥–ª—è aiogram
            backup_file = BufferedInputFile(db_content, filename="copy_backup_db.db")

            await call.bot.send_document(admins["George"], backup_file)
            await call.answer()
        except FileNotFoundError:
            await call.message.edit_text("‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await call.answer()
        except Exception as e:
            await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            await call.answer()
    elif call.data == "key_cancel_copy":
        await call.message.edit_text(text=greetings, reply_markup=get_start_key_board())
        await call.answer()


@router.message(F.text)
async def send_msg(message_to_send: Message):
    if message_to_send.from_user.id in admins.values():
        msg = message_to_send.text

        if msg.startswith("#"):
            msg = msg.lstrip("#")
            id_list = await get_all_user_ids()

            for id_user in id_list:
                try:
                    await message_to_send.bot.send_message(id_user, text=msg)
                    await asyncio.sleep(0.3)
                except Exception as e:
                    continue
        else:
            await message_to_send.answer(text="–î–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–ª—Å—è —Å —Å–∏–º–≤–æ–ª–∞ '#'")


@router.message(F.video)
async def send_video(video_to_send: Message):
    if video_to_send.from_user.id in admins.values():
        id_list = await get_all_user_ids()

        for id_user in id_list:
            try:
                await video_to_send.bot.send_video(id_user, video_to_send.video.file_id)
                await asyncio.sleep(0.3)
            except Exception as e:
                continue


async def process_payment_media(message: Message, media_type: str = "photo"):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç) –∫–∞–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã"""
    keyboard = get_control_subscription_keyboard()

    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    caption = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º–∏:\n &??&{user_id}\n{username}\n{first_name}\n"
               f"{last_name}&??&\n—Ö–æ—á–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å/–ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")

    if media_type == "photo":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
        await message.bot.send_photo(
            admins["George"],
            message.photo[-1].file_id,
            caption=caption,
            reply_markup=keyboard
        )
    elif media_type == "document":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        await message.bot.send_document(
            admins["George"],
            message.document.file_id,
            caption=caption,
            reply_markup=keyboard
        )


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@router.message(F.photo)
async def send_photo(received_photo: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã (—Ñ–æ—Ç–æ)"""
    await process_payment_media(received_photo, "photo")


# –ù–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
@router.message(F.document)
async def send_document(received_document: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã (–¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)"""
    document: Document = received_document.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if document.mime_type and document.mime_type.startswith('image/'):
        await process_payment_media(received_document, "document")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await received_document.answer(
            "‚ö†Ô∏è –ë–æ—Ç —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ñ–æ—Ç–æ). "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        )


@router.callback_query(F.data == "key_renew_subscription")
async def will_subscribe(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_data_for_subscription = parse_user_data_from_caption(callback.message.caption)
    user_id = int(user_data_for_subscription[0])
    username = user_data_for_subscription[1] if len(user_data_for_subscription) > 1 else None
    first_name = user_data_for_subscription[2] if len(user_data_for_subscription) > 2 else None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_status = await get_user_status(user_id)

    if not user_status:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        await process_new_subscription(callback, user_id, username, first_name)
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await process_subscription_renewal(callback, user_id, username, first_name)


async def process_new_subscription(callback: CallbackQuery, user_id: int, username: str, first_name: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏ XUI –Ω–∞ 30 –¥–Ω–µ–π
        client_uuid, email_identifier, vless_config = await create_vless_client(user_id, username, first_name, 30)

        if client_uuid and vless_config and email_identifier:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            await update_user_subscription(user_id, client_uuid, vless_config, email_identifier, 30)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await callback.bot.send_message(user_id, text_for_new_link)
            await callback.bot.send_message(user_id, vless_config)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—Ö–µ
            await callback.bot.send_message(
                admins["George"],
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {email_identifier} —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π\n"
                f"UUID: {client_uuid}\n"
                f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
            )
        else:
            # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            await callback.bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Butter_robot_supportBot"
            )
            await callback.bot.send_message(
                admins["George"],
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.bot.send_message(
            user_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. "
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Butter_robot_supportBot"
        )


async def process_subscription_renewal(callback: CallbackQuery, user_id: int, username: str, first_name: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_id(user_id)
        if not user:
            await callback.bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        client_uuid = user['client_uuid']  # –ò–°–ü–û–õ–¨–ó–£–ï–ú UUID –ò–ó –ë–î
        email_identifier = user['email_identifier']

        print(f"üîç –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è UUID: {client_uuid}")

        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ø–∞–Ω–µ–ª–∏ XUI –Ω–∞ 30 –¥–Ω–µ–π
        if await extend_client_subscription(client_uuid, 30):
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
            success = await extend_user_subscription(user_id, 30)

            if success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await callback.bot.send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π.")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                await callback.bot.send_message(
                    admins["George"],
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email_identifier} –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π"
                )
            else:
                await callback.bot.send_message(
                    user_id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. "
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Butter_robot_supportBot"
                )

                await callback.bot.send_message(
                    admins["George"],
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email_identifier} –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        else:
            await callback.bot.send_message(
                user_id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–∞–Ω–µ–ª–∏. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Butter_robot_supportBot"
            )

            await callback.bot.send_message(
                admins["George"],
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email_identifier} –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.bot.send_message(
            user_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. "
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Butter_robot_supportBot"
        )


@router.callback_query(F.data == "key_cancel_subscription")
async def cancel_subscription(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å user_id –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_data_for_subscription = parse_user_data_from_caption(callback.message.caption)

        if user_data_for_subscription and len(user_data_for_subscription) > 0:
            # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_id = int(user_data_for_subscription[0])
            username = user_data_for_subscription[1] if len(user_data_for_subscription) > 1 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            first_name = user_data_for_subscription[2] if len(user_data_for_subscription) > 2 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await callback.bot.send_message(
                user_id,
                "‚ùå <b>–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–∏ –≤—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã\n"
                "‚Ä¢ –í—ã–±—Ä–∞–ª–∏ –ª–∏ –≤–µ—Ä–Ω—ã–π –±–∞–Ω–∫ (–ë–ö–°)\n"
                "‚Ä¢ –£–∫–∞–∑–∞–ª–∏ –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Butter_robot_supportBot"
            )

            # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await callback.bot.send_message(
                admins["George"],
                f"‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} (@{username})\n"
                f"ID: {user_id}\n"
                f"–í—Ä–µ–º—è: {dt.now().strftime('%d.%m.%Y %H:%M')}"
            )

        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await callback.bot.send_message(
                admins["George"],
                f"‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n\n"
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"–í—Ä–µ–º—è: {dt.now().strftime('%d.%m.%Y %H:%M')}"
            )

            # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∑–Ω–∞–µ–º –∫–æ–º—É

    except Exception as e:
        # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ - –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await callback.bot.send_message(
            admins["George"],
            f"‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n\n"
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        print(f"–û—à–∏–±–∫–∞ –≤ cancel_subscription: {e}")

    await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

@router.callback_query(F.data == "key_to_make_payment")
async def will_payment(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ–ª–∞–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç—å"""
    user_status = await get_user_status(call.from_user.id)

    if user_status:
        finish_date = await get_user_finish_date(call.from_user.id)
        formatted_finish_date = format_date_for_display(finish_date)

        keyboard = get_keyboard_yes_or_no("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "<<< –ù–∞–∑–∞–¥", "key_make_payment", "key_cancel_payment")
        await call.message.edit_text(
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–∞. "
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è "
            f"<b>{formatted_finish_date}</b>."
            f" –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É?",
            reply_markup=keyboard
        )
        await call.answer(cache_time=5)
    else:
        await call.message.edit_text(text=how_to_pay_text, reply_markup=get_back_to_will_payment())
        await call.answer(cache_time=5)


@router.callback_query(F.data.in_({"key_make_payment", "key_cancel_payment"}))
async def continue_payment(call: CallbackQuery):
    if call.data == "key_make_payment":
        await call.message.edit_text(how_to_pay_subscriber, reply_markup=get_back_to_will_payment())
        await call.answer(cache_time=5)
    elif call.data == "key_cancel_payment":
        await call.message.edit_text(text=payments_text, reply_markup=get_keyboard_to_make_payment())
        await call.answer(cache_time=5)


@router.callback_query(F.data == "back_to_will_payment")
async def back_to_payment_menu(call: CallbackQuery):
    await call.message.edit_text(payments_text, reply_markup=get_keyboard_to_make_payment())
    await call.answer(cache_time=5)