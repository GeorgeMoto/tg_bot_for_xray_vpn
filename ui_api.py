import uuid
import json
import asyncio
import datetime
import httpx
import re
from config import API_HOST, API_USERNAME, API_PASSWORD, INBOUND_ID

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –≤ –∫–æ–Ω—Ñ–∏–≥–µ
try:
    from config import USE_TLS_VERIFY
except ImportError:
    USE_TLS_VERIFY = False


def generate_email_identifier(user_id, username, first_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç email –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–∞–Ω–µ–ª–∏ XUI"""
    if username:
        return f"{user_id}_@{username.lstrip('@')}"
    elif first_name:
        return f"{user_id}_{first_name}"
    else:
        return f"{user_id}_noname"


async def create_vless_client(user_id, username, first_name, days=30):
    """
    –°–æ–∑–¥–∞–µ—Ç VLESS –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏ XUI —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (client_uuid, email_identifier, vless_config_url) –∏–ª–∏ (None, None, None)
    """
    try:
        print(f"üîç –°–æ–∑–¥–∞–µ–º VLESS –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_uuid = str(uuid.uuid4())
        email_id = generate_email_identifier(user_id, username, first_name)

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        current_time = datetime.datetime.now()
        expiry_time = current_time + datetime.timedelta(days=days)
        expiry_timestamp = int(expiry_time.timestamp() * 1000)

        print(f"üîç UUID: {client_uuid}")
        print(f"üîç Email: {email_id}")
        print(f"üîç –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_time}")

        async with httpx.AsyncClient(verify=USE_TLS_VERIFY, timeout=30) as client:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            login_data = {
                "username": API_USERNAME,
                "password": API_PASSWORD
            }
            login_response = await client.post(f"{API_HOST}/login", data=login_data)

            if login_response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.status_code}")
                return None, None, None

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π inbound
            inbound_response = await client.get(f"{API_HOST}/panel/api/inbounds/get/{INBOUND_ID}")

            if inbound_response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è inbound: {inbound_response.status_code}")
                return None, None, None

            inbound_data = inbound_response.json()

            if not inbound_data.get('success'):
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {inbound_data}")
                return None, None, None

            # –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ inbound
            inbound_obj = inbound_data['obj']
            settings = json.loads(inbound_obj.get('settings', '{}'))
            clients = settings.get('clients', [])

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            new_client = {
                "id": client_uuid,
                "email": email_id,
                "enable": True,
                "flow": "",
                "limitIp": 3,  # –î–æ 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                "totalGB": 0,  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
                "expiryTime": expiry_timestamp,
                "tgId": str(user_id),
                "subId": ""
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            clients.append(new_client)
            settings['clients'] = clients

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è inbound
            update_data = {
                'id': INBOUND_ID,
                'remark': inbound_obj.get('remark', ''),
                'enable': inbound_obj.get('enable', True),
                'expiryTime': inbound_obj.get('expiryTime', 0),
                'listen': inbound_obj.get('listen', ''),
                'port': inbound_obj.get('port'),
                'protocol': inbound_obj.get('protocol'),
                'settings': json.dumps(settings),
                'streamSettings': inbound_obj.get('streamSettings', ''),
                'tag': inbound_obj.get('tag', ''),
                'sniffing': inbound_obj.get('sniffing', ''),
                'allocate': inbound_obj.get('allocate', ''),
            }

            print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...")

            # –û–±–Ω–æ–≤–ª—è–µ–º inbound —Å –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
            update_response = await client.post(f"{API_HOST}/panel/api/inbounds/update/{INBOUND_ID}", json=update_data)

            if update_response.status_code == 200:
                response_data = update_response.json()
                if response_data.get('success'):
                    print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {email_id}")

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    vless_config = await generate_vless_config_direct(inbound_obj, client_uuid, email_id)

                    return client_uuid, email_id, vless_config
                else:
                    print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: {response_data}")
                    return None, None, None
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: {update_response.status_code}")
                print(f"‚ùå –û—Ç–≤–µ—Ç: {update_response.text}")
                return None, None, None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return None, None, None


async def delete_client_by_email(email_id):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø–∞–Ω–µ–ª–∏ XUI –ø–æ email —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
    """
    try:
        print(f"üîç –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞: {email_id}")

        async with httpx.AsyncClient(verify=USE_TLS_VERIFY, timeout=30) as client:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            login_data = {
                "username": API_USERNAME,
                "password": API_PASSWORD
            }
            login_response = await client.post(f"{API_HOST}/login", data=login_data)

            if login_response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.status_code}")
                return False

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π inbound
            inbound_response = await client.get(f"{API_HOST}/panel/api/inbounds/get/{INBOUND_ID}")

            if inbound_response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è inbound: {inbound_response.status_code}")
                return False

            inbound_data = inbound_response.json()

            if not inbound_data.get('success'):
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {inbound_data}")
                return False

            # –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ inbound
            inbound_obj = inbound_data['obj']
            settings = json.loads(inbound_obj.get('settings', '{}'))
            clients = settings.get('clients', [])

            # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            original_count = len(clients)
            clients = [c for c in clients if c.get('email') != email_id]

            if len(clients) == original_count:
                print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {email_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏")
                return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –µ—Å–ª–∏ —É–∂–µ –Ω–µ—Ç

            settings['clients'] = clients

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è inbound
            update_data = {
                'id': INBOUND_ID,
                'remark': inbound_obj.get('remark', ''),
                'enable': inbound_obj.get('enable', True),
                'expiryTime': inbound_obj.get('expiryTime', 0),
                'listen': inbound_obj.get('listen', ''),
                'port': inbound_obj.get('port'),
                'protocol': inbound_obj.get('protocol'),
                'settings': json.dumps(settings),
                'streamSettings': inbound_obj.get('streamSettings', ''),
                'tag': inbound_obj.get('tag', ''),
                'sniffing': inbound_obj.get('sniffing', ''),
                'allocate': inbound_obj.get('allocate', ''),
            }

            # –û–±–Ω–æ–≤–ª—è–µ–º inbound –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞
            update_response = await client.post(f"{API_HOST}/panel/api/inbounds/update/{INBOUND_ID}", json=update_data)

            if update_response.status_code == 200:
                response_data = update_response.json()
                if response_data.get('success'):
                    print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω: {email_id}")
                    return True
                else:
                    print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {response_data}")
                    return False
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {update_response.status_code}")
                return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {email_id}: {e}")
        return False


async def extend_client_subscription(client_uuid, days=30):
    """
    –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ API –ø–∞–Ω–µ–ª–∏
    """
    try:
        print(f"üîç –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è UUID: {client_uuid}")

        async with httpx.AsyncClient(verify=USE_TLS_VERIFY, timeout=30) as client:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            login_data = {
                "username": API_USERNAME,
                "password": API_PASSWORD
            }
            login_response = await client.post(f"{API_HOST}/login", data=login_data)

            if login_response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.status_code}")
                return False

            # –ü–æ–ª—É—á–µ–Ω–∏–µ inbound —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
            inbound_response = await client.get(f"{API_HOST}/panel/api/inbounds/get/{INBOUND_ID}")

            if inbound_response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è inbound: {inbound_response.status_code}")
                return False

            inbound_data = inbound_response.json()

            if not inbound_data.get('success'):
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {inbound_data}")
                return False

            # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ inbound
            inbound_obj = inbound_data['obj']
            settings = json.loads(inbound_obj.get('settings', '{}'))
            clients = settings.get('clients', [])

            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ inbound: {len(clients)}")

            # –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ UUID
            client_found = False

            for i, client_data in enumerate(clients):
                if client_data.get('id') == client_uuid:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç —Å UUID: {client_uuid}")
                    print(f"üîç Email: {client_data.get('email')}")
                    print(f"üîç –¢–µ–∫—É—â–∏–π Expiry: {client_data.get('expiryTime')}")

                    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    current_time = datetime.datetime.now()
                    current_expiry_ms = client_data.get('expiryTime', 0)

                    if current_expiry_ms and current_expiry_ms > int(current_time.timestamp() * 1000):
                        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
                        current_expiry = datetime.datetime.fromtimestamp(current_expiry_ms / 1000)
                        new_expiry_time = current_expiry + datetime.timedelta(days=days)
                    else:
                        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                        new_expiry_time = current_time + datetime.timedelta(days=days)

                    new_expiry_ms = int(new_expiry_time.timestamp() * 1000)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                    clients[i]['expiryTime'] = new_expiry_ms
                    clients[i]['enable'] = True

                    print(f"üîç –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: {new_expiry_time}")

                    client_found = True
                    break

            if not client_found:
                print(f"‚ùå –ö–ª–∏–µ–Ω—Ç —Å UUID {client_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö inbound")
                return False

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è inbound
            settings['clients'] = clients

            update_data = {
                'id': INBOUND_ID,
                'remark': inbound_obj.get('remark', ''),
                'enable': inbound_obj.get('enable', True),
                'expiryTime': inbound_obj.get('expiryTime', 0),
                'listen': inbound_obj.get('listen', ''),
                'port': inbound_obj.get('port'),
                'protocol': inbound_obj.get('protocol'),
                'settings': json.dumps(settings),
                'streamSettings': inbound_obj.get('streamSettings', ''),
                'tag': inbound_obj.get('tag', ''),
                'sniffing': inbound_obj.get('sniffing', ''),
                'allocate': inbound_obj.get('allocate', ''),
            }

            print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ inbound...")

            # –û–±–Ω–æ–≤–ª—è–µ–º inbound
            update_response = await client.post(f"{API_HOST}/panel/api/inbounds/update/{INBOUND_ID}", json=update_data)

            if update_response.status_code == 200:
                response_data = update_response.json()
                if response_data.get('success'):
                    print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {client_uuid}")
                    return True
                else:
                    print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {response_data}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {update_response.status_code}")
                return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ {client_uuid}: {e}")
        return False


async def generate_vless_config_direct(inbound_obj, client_uuid, email):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö inbound"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ host
        ip_match = re.search(r'(\d+\.\d+\.\d+\.\d+)', API_HOST)
        server_ip = ip_match.group(1) if ip_match else 'server-ip'

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ inbound
        port = inbound_obj.get('port')
        protocol = inbound_obj.get('protocol')

        # –ü–∞—Ä—Å–∏–º streamSettings
        stream_settings_str = inbound_obj.get('streamSettings', '{}')
        stream_settings = json.loads(stream_settings_str) if stream_settings_str else {}

        network = stream_settings.get('network', 'tcp')
        security = stream_settings.get('security', 'none')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é VLESS —Å—Å—ã–ª–∫—É –ë–ï–ó —Ö—ç—à–∞
        vless_url = f"vless://{client_uuid}@{server_ip}:{port}?type={network}&security={security}"

        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è reality, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if security == "reality":
            reality_settings = stream_settings.get('realitySettings', {})
            if reality_settings:
                public_key = reality_settings.get("publicKey", "")
                server_names = reality_settings.get("serverNames", [])
                short_ids = reality_settings.get("shortIds", [])

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á (pbk) - —ç—Ç–æ —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä!
                if public_key:
                    vless_url += f"&pbk={public_key}"

                # –î–æ–±–∞–≤–ª—è–µ–º fingerprint (–∏—Å–ø–æ–ª—å–∑—É–µ–º chrome –≤–º–µ—Å—Ç–æ firefox)
                vless_url += "&fp=chrome"

                # –î–æ–±–∞–≤–ª—è–µ–º server name indication
                if server_names:
                    vless_url += f"&sni={server_names[0]}"

                # –î–æ–±–∞–≤–ª—è–µ–º short ID
                if short_ids:
                    vless_url += f"&sid={short_ids[0]}"

                # –î–æ–±–∞–≤–ª—è–µ–º spider X (–ø—É—Ç—å)
                vless_url += "&spx=%2F"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç—à —Å email –í –ö–û–ù–¶–ï
        vless_url += f"#{email}"

        print(f"‚úÖ VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {vless_url}")
        return vless_url

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")



async def check_client_sync(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É –ë–î –∏ –ø–∞–Ω–µ–ª—å—é XUI
    """
    try:
        from database import get_user_by_id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        user = await get_user_by_id(user_id)
        if not user:
            return {"status": "error", "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"}

        client_uuid = user['client_uuid']
        email_identifier = user['email_identifier']

        if not client_uuid:
            return {"status": "error", "message": "UUID –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î"}

        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        async with httpx.AsyncClient(verify=USE_TLS_VERIFY, timeout=30) as client:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            login_data = {
                "username": API_USERNAME,
                "password": API_PASSWORD
            }
            login_response = await client.post(f"{API_HOST}/login", data=login_data)

            if login_response.status_code != 200:
                return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞–Ω–µ–ª–∏: {login_response.status_code}"}

            # –ü–æ–ª—É—á–µ–Ω–∏–µ inbound
            inbound_response = await client.get(f"{API_HOST}/panel/api/inbounds/get/{INBOUND_ID}")

            if inbound_response.status_code != 200:
                return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è inbound: {inbound_response.status_code}"}

            inbound_data = inbound_response.json()

            if not inbound_data.get('success'):
                return {"status": "error", "message": f"API –ø–∞–Ω–µ–ª–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {inbound_data}"}

            # –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏
            inbound_obj = inbound_data['obj']
            settings = json.loads(inbound_obj.get('settings', '{}'))
            clients = settings.get('clients', [])

            # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ UUID
            panel_client = None
            for client_data in clients:
                if client_data.get('id') == client_uuid:
                    panel_client = client_data
                    break

            if panel_client:
                # –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏
                current_time = datetime.datetime.now()
                expiry_ms = panel_client.get('expiryTime', 0)

                if expiry_ms:
                    expiry_time = datetime.datetime.fromtimestamp(expiry_ms / 1000)
                    is_expired = expiry_time < current_time
                else:
                    expiry_time = None
                    is_expired = True

                return {
                    "status": "synced",
                    "message": "–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏",
                    "db_data": {
                        "user_id": user_id,
                        "client_uuid": client_uuid,
                        "email_identifier": email_identifier,
                        "status": user['status'],
                        "finish_date": user['finish_date']
                    },
                    "panel_data": {
                        "email": panel_client.get('email'),
                        "enable": panel_client.get('enable'),
                        "expiry_time": expiry_time.strftime('%Y-%m-%d %H:%M:%S') if expiry_time else None,
                        "is_expired": is_expired,
                        "total_gb": panel_client.get('totalGB'),
                        "limit_ip": panel_client.get('limitIp')
                    }
                }
            else:
                # –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏
                return {
                    "status": "not_synced",
                    "message": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏ XUI",
                    "db_data": {
                        "user_id": user_id,
                        "client_uuid": client_uuid,
                        "email_identifier": email_identifier,
                        "status": user['status'],
                        "finish_date": user['finish_date']
                    },
                    "panel_clients_count": len(clients),
                    "available_uuids": [c.get('id') for c in clients[:5]]
                }

    except Exception as e:
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"}