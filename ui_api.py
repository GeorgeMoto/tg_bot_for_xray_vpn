import uuid
import json
import asyncio
import datetime
import httpx
from py3xui import AsyncApi, Client
from config import API_HOST, API_USERNAME, API_PASSWORD, INBOUND_ID

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –≤ –∫–æ–Ω—Ñ–∏–≥–µ
try:
    from config import USE_TLS_VERIFY
except ImportError:
    USE_TLS_VERIFY = False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è API
_api = None


async def get_api():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç API —ç–∫–∑–µ–º–ø–ª—è—Ä"""
    global _api
    if _api is None:
        _api = AsyncApi(API_HOST, API_USERNAME, API_PASSWORD, use_tls_verify=USE_TLS_VERIFY)
        await _api.login()
    return _api


def generate_email_identifier(user_id, username, first_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç email –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–∞–Ω–µ–ª–∏ XUI"""
    if username:
        return f"{user_id}_@{username.lstrip('@')}"
    elif first_name:
        return f"{user_id}_{first_name}"
    else:
        return f"{user_id}_noname"


async def create_vless_client(user_id, username, first_name, days=30):
    """
    –°–æ–∑–¥–∞–µ—Ç VLESS –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏ XUI
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (client_uuid, email_identifier, vless_config_url) –∏–ª–∏ (None, None, None)
    """
    try:
        api = await get_api()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_uuid = str(uuid.uuid4())
        email_id = generate_email_identifier(user_id, username, first_name)

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è (30 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
        current_time = datetime.datetime.now()
        expiry_time = current_time + datetime.timedelta(days=days)
        expiry_timestamp = int(expiry_time.timestamp() * 1000)

        print(f"–°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞: {email_id}")
        print(f"UUID: {client_uuid}")
        print(f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_time}")

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
        new_client = Client(
            id=client_uuid,
            email=email_id,
            enable=True,
            limit_ip=3,  # –î–æ 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            total_gb=0,  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
            expiry_time=expiry_timestamp,
            tg_id=str(user_id),
            sub_id=""
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ inbound
        await api.client.add(INBOUND_ID, [new_client])

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await asyncio.sleep(1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ –∫–ª–∏–µ–Ω—Ç
        if await verify_client_created(email_id):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            vless_url = await generate_vless_config(client_uuid, email_id)
            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {email_id}")
            return client_uuid, email_id, vless_url
        else:
            print(f"‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
            return None, None, None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None, None, None


async def verify_client_created(email_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ –ø–∞–Ω–µ–ª–∏"""
    try:
        async with httpx.AsyncClient(verify=USE_TLS_VERIFY, timeout=10) as client:
            # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
            await client.post(f"{API_HOST}/login", data={
                "username": API_USERNAME,
                "password": API_PASSWORD
            })

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ inbounds
            response = await client.get(f"{API_HOST}/panel/api/inbounds/list")
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    for inbound in data.get('obj', []):
                        if inbound.get('id') == INBOUND_ID:
                            settings = json.loads(inbound.get('settings', '{}'))
                            clients = settings.get('clients', [])

                            for client_data in clients:
                                if client_data.get('email') == email_id:
                                    return True
        return False
    except Exception:
        return False


async def delete_client_by_email(email_id):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø–∞–Ω–µ–ª–∏ XUI –ø–æ email
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    """
    try:
        api = await get_api()

        # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email
        client = await api.client.get_by_email(email_id)

        if client:
            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            result = await api.client.delete(client.email)

            if result:
                print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–Ω–µ–ª–∏: {email_id}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {email_id}")
                return False
        else:
            print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏: {email_id}")
            return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –µ—Å–ª–∏ —É–∂–µ –Ω–µ—Ç

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {email_id}: {e}")
        return False


async def extend_client_subscription(email_id, days=30):
    """
    –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        api = await get_api()

        # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email
        client = await api.client.get_by_email(email_id)

        if not client:
            print(f"‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {email_id}")
            return False

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        current_time = datetime.datetime.now()
        if client.expiry_time and client.expiry_time > int(current_time.timestamp() * 1000):
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
            current_expiry = datetime.datetime.fromtimestamp(client.expiry_time / 1000)
            new_expiry_time = current_expiry + datetime.timedelta(days=days)
        else:
            # –ï—Å–ª–∏ –∏—Å—Ç–µ–∫–ª–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            new_expiry_time = current_time + datetime.timedelta(days=days)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        client.expiry_time = int(new_expiry_time.timestamp() * 1000)
        client.enable = True

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        result = await api.client.update(client.id, client)

        if result:
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {email_id}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {email_id}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ {email_id}: {e}")
        return False


async def generate_vless_config(client_uuid, email):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É"""
    try:
        api = await get_api()

        # –ü–æ–ª—É—á–∞–µ–º inbound –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        inbound = await api.inbound.get_by_id(INBOUND_ID)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ host
        import re
        ip_match = re.search(r'(\d+\.\d+\.\d+\.\d+)', API_HOST)
        server_ip = ip_match.group(1) if ip_match else 'server-ip'

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ inbound
        port = inbound.port
        network = inbound.stream_settings.network
        security = inbound.stream_settings.security

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é VLESS —Å—Å—ã–ª–∫—É
        vless_url = f"vless://{client_uuid}@{server_ip}:{port}/?type={network}&security={security}#{email}"

        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è reality, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if security == "reality" and hasattr(inbound.stream_settings, 'reality_settings'):
            reality_settings = inbound.stream_settings.reality_settings
            if reality_settings:
                public_key = reality_settings.get("publicKey", "")
                server_names = reality_settings.get("serverNames", [])
                short_ids = reality_settings.get("shortIds", [])

                if public_key:
                    vless_url += f"&pbk={public_key}"
                if server_names:
                    vless_url += f"&sni={server_names[0]}"
                if short_ids:
                    vless_url += f"&sid={short_ids[0]}"

                vless_url += "&fp=firefox&spx=%2F"

        return vless_url

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return f"vless://{client_uuid}@server-ip:443/?type=tcp&security=none#{email}"


async def test_xui_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ XUI"""
    try:
        print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫: {API_HOST}")
        print(f"üîê SSL –ø—Ä–æ–≤–µ—Ä–∫–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if USE_TLS_VERIFY else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}")

        api = await get_api()
        inbound = await api.inbound.get_by_id(INBOUND_ID)

        if inbound:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω inbound ID {INBOUND_ID}:")
            print(f"   –ü—Ä–æ—Ç–æ–∫–æ–ª: {inbound.protocol}")
            print(f"   –ü–æ—Ä—Ç: {inbound.port}")
            print(f"   –ö–ª–∏–µ–Ω—Ç–æ–≤: {len(inbound.settings.clients) if inbound.settings.clients else 0}")
            return True
        else:
            print(f"‚ùå Inbound —Å ID {INBOUND_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_xui_functions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –±–æ—Ç–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö XUI —Ñ—É–Ω–∫—Ü–∏–π...")

    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not await test_xui_connection():
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ XUI")
        return False

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ 30 –¥–Ω–µ–π
    test_user_id = 999999999
    test_username = "test_user"
    test_first_name = "Test"

    client_uuid, email_id, vless_url = await create_vless_client(
        test_user_id, test_username, test_first_name, 30  # 30 –¥–Ω–µ–π
    )

    if client_uuid and email_id and vless_url:
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π")
        print(f"Email: {email_id}")
        print(f"VLESS: {vless_url[:80]}...")

        # –¢–µ—Å—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞ 30 –¥–Ω–µ–π
        if await extend_client_subscription(email_id, 30):
            print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø—Ä–æ—à–µ–ª")

        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        if await delete_client_by_email(email_id):
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")

    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    return True


if __name__ == "__main__":
    try:
        asyncio.run(test_xui_functions())
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install py3xui")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")